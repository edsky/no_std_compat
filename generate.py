#!/usr/bin/env python3

import argparse
import os
import re
import subprocess

# Parse arguments

parser = argparse.ArgumentParser(
    description="Generate a std compatibility module"
)
parser.add_argument("--src", help=(
    "Specify the location of the rust source code. The default is "
    "`$(rustc --print sysroot)/lib/rustlib/src/rust/src`"
))
args = parser.parse_args()

if args.src is None:
    output = subprocess.run(["rustc", "--print", "sysroot"],
                            capture_output=True)
    args.src = os.path.join(output.stdout.decode("utf-8").strip(),
                            "lib", "rustlib", "src", "rust", "src")


# Read files

modules_regex = re.compile(
    r"^(?:\S.*)?pub\s+(?:mod\s+|use\s+(?:[a-zA-Z_][a-zA-Z0-9_]*::)*)"
    r"([a-zA-Z_][a-zA-Z0-9_]*);",
    re.MULTILINE
)


def modules(crate):
    crate = os.path.join(args.src, crate, "lib.rs")
    with open(crate) as f:
        contents = f.read()

    return set(match.group(1) for match in modules_regex.finditer(contents))


def generate(module, *namespaces):
    out = f"pub mod {module} {{\n"

    if module == "prelude":
        return None

    for namespace in namespaces:
        out += "    "
        if namespace != "core":
            out += f"#[cfg(feature = \"{namespace}\")] "
        out += f"pub use __{namespace}::{module}::*;\n"

    if module == "collections":
        prefix = (
            "    #[cfg(all("
            "feature = \"alloc\", "
            "feature = \"compat_hash\""
            "))] pub use hashbrown::"
        )
        out += (
            prefix + "HashMap;\n" +
            prefix + "HashSet;\n"
        )

    out += "}"
    return out


core = modules("libcore")
alloc = modules("liballoc")

generated = {}

for module in core & alloc:
    generated[module] = generate(module, "core", "alloc")
for module in core - alloc:
    generated[module] = generate(module, "core")
for module in alloc - core:
    generated[module] = generate(module, "alloc")

generated["prelude"] = """pub mod prelude {
    pub mod v1 {
        pub use __core::prelude::v1::*;

        #[cfg(feature = "alloc")] pub use __alloc::prelude::v1::*;
        #[cfg(feature = "alloc")] pub use __alloc::{format, vec};
        #[cfg(feature = "compat_macros")]
        pub use crate::{print, println, eprint, eprintln, dbg};
    }
}"""

print("""//! Generated by generate.py located at the repository root
//! ./generate.py > src/generated.rs""")
for module in sorted(generated.items(), key=lambda i: i[0]):
    print(module[1])
